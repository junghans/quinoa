// *****************************************************************************
/*!
  \file      src/Inciter/transporter.ci
  \author    J. Bakosi
  \date      Tue 18 Oct 2016 01:22:49 PM MDT
  \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for Transporter
  \details   Charm++ module interface file for Transporter
*/
// *****************************************************************************

module transporter {

  extern module partitioner;

  namespace inciter {

    chare Transporter {
      entry Transporter();
      entry [reductiontarget] void load( uint64_t nelem );
      entry [reductiontarget] void partition();
      entry [reductiontarget] void flattened();
      entry [reductiontarget] void setup();
      entry [reductiontarget] void rowcomplete();
      entry [reductiontarget] void volcomplete();
      entry [reductiontarget] void dt( tk::real d[n], std::size_t n );
      entry [reductiontarget] void aveCost( tk::real c );
      entry [reductiontarget] void stdCost( tk::real c );
      entry [reductiontarget] void verifybc( CkReductionMsg* msg );
      entry [reductiontarget] void doverifybc( CkReductionMsg* msg );
      entry [reductiontarget] void initcomplete();
      entry [reductiontarget] void parcomcomplete();
      entry [reductiontarget] void nparcomplete();
      entry [reductiontarget] void diagnostics( tk::real d[n], std::size_t n );
      entry [reductiontarget] void diagcomplete();
      entry [reductiontarget] void outcomplete();
      entry [reductiontarget] void computedt();
      entry [reductiontarget] void finish();
      entry [reductiontarget] void verified();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):
      // -----------------------------
      //                                   DAG legend:
      //  Row -- Init                        Row  - linear system rows complete
      //        /                            Vol - nodal volumes complete
      //  Vol --                             Init - initialization continues
      //
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.
      //
      // If the linear system merger branches have done their part of storing
      // and exporting global row ids (Row), and the Carrier (worker) chares
      // have finish computing their nodal vollumes (Vol), initialization can
      // continue.

      entry void wait4eval() {
        when out_complete(), diag_complete() serial "eval" {
          evaluateTime(); } };

      entry void out_complete();
      entry void diag_complete();
    }

  } // inciter::

}
