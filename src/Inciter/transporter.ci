// *****************************************************************************
/*!
  \file      src/Inciter/transporter.ci
  \author    J. Bakosi
  \date      Tue 18 Oct 2016 10:00:28 AM MDT
  \copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.
  \brief     Charm++ module interface file for Transporter
  \details   Charm++ module interface file for Transporter
*/
// *****************************************************************************

module transporter {

  extern module partitioner;

  namespace inciter {

    chare Transporter {
      entry Transporter();
      entry [reductiontarget] void load( uint64_t nelem );
      entry [reductiontarget] void partition();
      entry [reductiontarget] void flattened();
      entry [reductiontarget] void setup();
      entry [reductiontarget] void rowcomplete();
      entry [reductiontarget] void volcomplete();
      entry [reductiontarget] void dt( tk::real d[n], std::size_t n );
      entry [reductiontarget] void aveCost( tk::real c );
      entry [reductiontarget] void stdCost( tk::real c );
      entry [reductiontarget] void verifybc( CkReductionMsg* msg );
      entry [reductiontarget] void doverifybc( CkReductionMsg* msg );
      entry [reductiontarget] void initcomplete();
      entry [reductiontarget] void parcomcomplete();
      entry [reductiontarget] void nparcomplete();
      entry [reductiontarget] void diagnostics( tk::real d[n], std::size_t n );
      entry [reductiontarget] void diagcomplete();
      entry [reductiontarget] void outcomplete();
      entry [reductiontarget] void computedt();
      entry [reductiontarget] void finish();
      entry [reductiontarget] void verified();

      // SDAG code follows. See http://charm.cs.illinois.edu/manuals/html/
      // charm++/manual.html, Sec. "Structured Control Flow: Structured Dagger".

      // High-level overview of the dependency and asynchronous call structure
      // ---------------------------------------------------------------------
      //
      // Directed Acyclic Graph (DAG):
      // -----------------------------
      //                                   DAG legend:
      //  Row -- Init                        Row  - linear system rows complete
      //        /                            Vol - nodal volumes complete
      //  Vol --                             Init - initialization continues
      //                                     Diag - compute diagnostics
      //                                     Out - Output particles to file
      //  ParCom -- Npar - Out -- Eval       ParCom - particle communications
      //                         /           Eval - evalaute time step
      //                   Diag -            Npar - output number of particles
      //
      //
      // Interpretation of the above DAG
      // -------------------------------
      // Control flow is from left to right and top to bottom.
      //
      // First graph: If the linear system merger branches have done their part
      // of storing and exporting global row ids (Row), and the Carrier (worker)
      // chares have finish computing their nodal vollumes (Vol), initialization
      // can continue.
      //
      // Second graph (happening after the first graph): At the final time step
      // stage particles are advanced on each Carrier chare followed by
      // searching for the mesh cells of each particle, which may require
      // communication if some particles have left the mesh cunk held by Carrier
      // chares. After the particle communication has been completed (ParCom),
      // each Carrier chare sends its number particles (Npar) then it will
      // contribute to the particle output in the given time step. Once that is
      // done particles are sent and buffered for output done by ParticleWriter.
      // In the meantime diagnostics are also computed by the linear system
      // merger group objects on each PE. The time step is evaluated only if
      // both the diagnostics and the particle output have been done.
      //
      // Collecting diagnostics is optional, i.e., it does not happen every time
      // step. If diagnostics are collected diag_complete() is signaled from the
      // reduction target, Transporter::diagnostics(). If diagnostics are not
      // collected in a time step, collection is skipped, and diag_complete() is
      // signaled from the shortcut function, Transporter::diagcomplete().
      //
      // Similar to diagnostics output, particle output is also optional and
      // does not happen every time step. The Charm++ reduction target
      // Transporter::outcomplete() is reached either way but on different
      // routes: if particles are output, the reduction originates from the
      // ParticleWriter Charm++ group after writeCoords() finished the output,
      // if particles are not output, the reduction originates from
      // Carrier::out(). Either way, the above DAG and its logic remains the
      // same.

      entry void wait4init() {
        when row_complete(), vol_complete() serial "init" {
          m_carrier.init(); } };

      entry void wait4parcom() {
        when parcom_complete() serial "recvpar" {
          m_carrier.out(); } };

      entry void wait4npar() {
        when npar_complete() serial "par" {
          m_carrier.doWriteParticles(); } };

      entry void wait4eval() {
        when out_complete(), diag_complete() serial "eval" {
          evaluateTime(); } };

      entry void row_complete();
      entry void vol_complete();
      entry void parcom_complete();
      entry void npar_complete();
      entry void out_complete();
      entry void diag_complete();
    }

  } // inciter::

}
